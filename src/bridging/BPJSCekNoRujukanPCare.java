/*
  Dilarang keras menggandakan/mengcopy/menyebarkan/membajak/mendecompile 
  Software ini dalam bentuk apapun tanpa seijin pembuat software
  (Khanza.Soft Media). Bagi yang sengaja membajak softaware ini ta
  npa ijin, kami sumpahi sial 1000 turunan, miskin sampai 500 turu
  nan. Selalu mendapat kecelakaan sampai 400 turunan. Anak pertama
  nya cacat tidak punya kaki sampai 300 turunan. Susah cari jodoh
  sampai umur 50 tahun sampai 200 turunan. Ya Alloh maafkan kami 
  karena telah berdoa buruk, semua ini kami lakukan karena kami ti
  dak pernah rela karya kami dibajak tanpa ijin.
 */

package bridging;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import fungsi.WarnaTable;
import java.awt.Dimension;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import fungsi.sekuel;
import fungsi.validasi;
import fungsi.var;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.io.FileInputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import javax.swing.JOptionPane;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.web.client.RestTemplate;

/**
 *
 * @author dosen
 */
public final class BPJSCekNoRujukanPCare extends javax.swing.JDialog {
    private final DefaultTableModel tabMode;
    private final Properties prop = new Properties();
    private validasi Valid=new validasi();
    private sekuel Sequel=new sekuel();
    private int i=0;

    /** Creates new form DlgKamar
     * @param parent
     * @param modal */
    public BPJSCekNoRujukanPCare(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        this.setLocation(10,2);
        setSize(628,674);

        Object[] row={"",""};
        tabMode=new DefaultTableModel(null,row){
              @Override public boolean isCellEditable(int rowIndex, int colIndex){return false;}
        };
        tbKamar.setModel(tabMode);

        //tbKamar.setDefaultRenderer(Object.class, new WarnaTable(panelJudul.getBackground(),tbKamar.getBackground()));
        tbKamar.setPreferredScrollableViewportSize(new Dimension(500,500));
        tbKamar.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (int i = 0; i < 2; i++) {
            TableColumn column = tbKamar.getColumnModel().getColumn(i);
            if(i==0){
                column.setPreferredWidth(170);
            }else if(i==1){
                column.setPreferredWidth(450);
            }
        }
        tbKamar.setDefaultRenderer(Object.class, new WarnaTable());
        ChkCari.setSelected(false);
        isForm();
    }
    
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internalFrame1 = new widget.InternalFrame();
        Scroll = new widget.ScrollPane();
        tbKamar = new widget.Table();
        PanelInput = new javax.swing.JPanel();
        panelCari = new widget.panelisi();
        ChkCari = new widget.CekBox();
        panelGlass6 = new widget.panelisi();
        jLabel16 = new widget.Label();
        NoRujukan = new widget.TextBox();
        BtnCari = new widget.Button();
        jLabel17 = new widget.Label();
        BtnPrint = new widget.Button();
        BtnKeluar = new widget.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(null);
        setIconImages(null);
        setUndecorated(true);
        setResizable(false);

        internalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 245, 235)), "::[ Pencarian Data Rujukan PCare Berdasarkan Nomor Rujukan ]::", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(50, 70, 40))); // NOI18N
        internalFrame1.setName("internalFrame1"); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        Scroll.setName("Scroll"); // NOI18N
        Scroll.setOpaque(true);

        tbKamar.setAutoCreateRowSorter(true);
        tbKamar.setToolTipText("Silahkan klik untuk memilih data yang mau diedit ataupun dihapus");
        tbKamar.setName("tbKamar"); // NOI18N
        Scroll.setViewportView(tbKamar);

        internalFrame1.add(Scroll, java.awt.BorderLayout.CENTER);

        PanelInput.setName("PanelInput"); // NOI18N
        PanelInput.setOpaque(false);
        PanelInput.setPreferredSize(new java.awt.Dimension(200, 462));
        PanelInput.setLayout(new java.awt.BorderLayout(1, 1));

        panelCari.setName("panelCari"); // NOI18N
        panelCari.setPreferredSize(new java.awt.Dimension(44, 44));
        panelCari.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 7));
        PanelInput.add(panelCari, java.awt.BorderLayout.CENTER);

        ChkCari.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/145.png"))); // NOI18N
        ChkCari.setMnemonic('I');
        ChkCari.setText("  .: Input Registrasi");
        ChkCari.setToolTipText("Alt+I");
        ChkCari.setBorderPainted(true);
        ChkCari.setBorderPaintedFlat(true);
        ChkCari.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ChkCari.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        ChkCari.setIconTextGap(2);
        ChkCari.setName("ChkCari"); // NOI18N
        ChkCari.setPreferredSize(new java.awt.Dimension(632, 22));
        ChkCari.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/145.png"))); // NOI18N
        ChkCari.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/143.png"))); // NOI18N
        ChkCari.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/143.png"))); // NOI18N
        ChkCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkCariActionPerformed(evt);
            }
        });
        PanelInput.add(ChkCari, java.awt.BorderLayout.PAGE_START);

        panelGlass6.setName("panelGlass6"); // NOI18N
        panelGlass6.setPreferredSize(new java.awt.Dimension(44, 54));
        panelGlass6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 9));

        jLabel16.setText("No. Rujukan");
        jLabel16.setName("jLabel16"); // NOI18N
        jLabel16.setPreferredSize(new java.awt.Dimension(70, 23));
        panelGlass6.add(jLabel16);

        NoRujukan.setName("NoRujukan"); // NOI18N
        NoRujukan.setPreferredSize(new java.awt.Dimension(250, 23));
        NoRujukan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                NoRujukanKeyPressed(evt);
            }
        });
        panelGlass6.add(NoRujukan);

        BtnCari.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/accept.png"))); // NOI18N
        BtnCari.setMnemonic('6');
        BtnCari.setToolTipText("Alt+6");
        BtnCari.setName("BtnCari"); // NOI18N
        BtnCari.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCariActionPerformed(evt);
            }
        });
        BtnCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnCariKeyPressed(evt);
            }
        });
        panelGlass6.add(BtnCari);

        jLabel17.setName("jLabel17"); // NOI18N
        jLabel17.setPreferredSize(new java.awt.Dimension(30, 23));
        panelGlass6.add(jLabel17);

        BtnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/b_print.png"))); // NOI18N
        BtnPrint.setMnemonic('T');
        BtnPrint.setText("Cetak");
        BtnPrint.setToolTipText("Alt+T");
        BtnPrint.setName("BtnPrint"); // NOI18N
        BtnPrint.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPrintActionPerformed(evt);
            }
        });
        panelGlass6.add(BtnPrint);

        BtnKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/exit.png"))); // NOI18N
        BtnKeluar.setMnemonic('K');
        BtnKeluar.setText("Keluar");
        BtnKeluar.setToolTipText("Alt+K");
        BtnKeluar.setName("BtnKeluar"); // NOI18N
        BtnKeluar.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnKeluarActionPerformed(evt);
            }
        });
        BtnKeluar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnKeluarKeyPressed(evt);
            }
        });
        panelGlass6.add(BtnKeluar);

        PanelInput.add(panelGlass6, java.awt.BorderLayout.PAGE_END);

        internalFrame1.add(PanelInput, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnKeluarActionPerformed
        dispose();
    }//GEN-LAST:event_BtnKeluarActionPerformed

    private void BtnKeluarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnKeluarKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            dispose();
        }else{Valid.pindah(evt,BtnPrint,BtnKeluar);}
    }//GEN-LAST:event_BtnKeluarKeyPressed

    private void BtnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPrintActionPerformed
        if(tabMode.getRowCount()==0){
            JOptionPane.showMessageDialog(null,"Maaf, data sudah habis. Tidak ada data yang bisa anda print...!!!!");
            //TCari.requestFocus();
        }else if(tabMode.getRowCount()!=0){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            Sequel.AutoComitFalse();
            Sequel.queryu("delete from temporary");
            int row=tabMode.getRowCount();
            for(int r=0;r<row;r++){  
                Sequel.menyimpan("temporary","'0','"+
                                tabMode.getValueAt(r,0).toString()+"','"+
                                tabMode.getValueAt(r,1).toString()+"','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''","Rekap Harian Pengadaan Ipsrs"); 
            }
            Sequel.AutoComitTrue();
            Map<String, Object> param = new HashMap<>();                 
            param.put("namars",var.getnamars());
            param.put("alamatrs",var.getalamatrs());
            param.put("kotars",var.getkabupatenrs());
            param.put("propinsirs",var.getpropinsirs());
            param.put("kontakrs",var.getkontakrs());
            param.put("emailrs",var.getemailrs());   
            param.put("logo",Sequel.cariGambar("select logo from setting")); 
            Valid.MyReport("rptCariPCareNoRujukan.jrxml","report","[ Pencarian Riwayat Peserta ]",
                "select no, temp1, temp2, temp3, temp4, temp5, temp6, temp7, temp8, temp9, temp10, temp11, temp12, temp13, temp14 from temporary order by no asc",param);
            this.setCursor(Cursor.getDefaultCursor());
        }        
    }//GEN-LAST:event_BtnPrintActionPerformed

    private void NoRujukanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NoRujukanKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){            
            BtnCariActionPerformed(null);
            BtnPrint.requestFocus();
        }else if(evt.getKeyCode()==KeyEvent.VK_PAGE_UP){
            BtnKeluar.requestFocus();
        }
    }//GEN-LAST:event_NoRujukanKeyPressed

    private void BtnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCariActionPerformed
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        tampil(NoRujukan.getText());
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_BtnCariActionPerformed

    private void BtnCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnCariKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            BtnCariActionPerformed(null);
        }else{
            Valid.pindah(evt,NoRujukan,BtnPrint);
        }
    }//GEN-LAST:event_BtnCariKeyPressed

    private void ChkCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkCariActionPerformed
       isForm();
    }//GEN-LAST:event_ChkCariActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            BPJSCekNoRujukanPCare dialog = new BPJSCekNoRujukanPCare(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button BtnCari;
    private widget.Button BtnKeluar;
    private widget.Button BtnPrint;
    private widget.CekBox ChkCari;
    private widget.TextBox NoRujukan;
    private javax.swing.JPanel PanelInput;
    private widget.ScrollPane Scroll;
    private widget.InternalFrame internalFrame1;
    private widget.Label jLabel16;
    private widget.Label jLabel17;
    private widget.panelisi panelCari;
    private widget.panelisi panelGlass6;
    private widget.Table tbKamar;
    // End of variables declaration//GEN-END:variables

    public void tampil(String nomorrujukan) {
        BPJSApi api=new BPJSApi();
        try {
            prop.loadFromXML(new FileInputStream("setting/database.xml"));
            String URL = prop.getProperty("URLAPIBPJS")+"/Rujukan/"+nomorrujukan;	

	    HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
	    headers.add("X-Cons-ID",prop.getProperty("CONSIDAPIBPJS"));
	    headers.add("X-Timestamp",String.valueOf(api.GetUTCdatetimeAsString()));            
	    headers.add("X-Signature",api.getHmac());
            
	    HttpEntity requestEntity = new HttpEntity(headers);
	    RestTemplate rest = new RestTemplate();	
            
            //System.out.println(rest.exchange(URL, HttpMethod.GET, requestEntity, String.class).getBody());
            ObjectMapper mapper = new ObjectMapper();
            JsonNode root = mapper.readTree(rest.exchange(URL, HttpMethod.GET, requestEntity, String.class).getBody());
            JsonNode nameNode = root.path("metadata");
            //System.out.println("code : "+nameNode.path("code").asText());
            //System.out.println("message : "+nameNode.path("message").asText());
            if(nameNode.path("message").asText().equals("OK")){
                Valid.tabelKosong(tabMode);
                JsonNode response = root.path("response").path("item");
                tabMode.addRow(new Object[]{
                    "Catatan",": "+response.path("catatan").asText()
                });   
                tabMode.addRow(new Object[]{
                    "Keluhan",": "+response.path("keluhan").asText()
                });     
                tabMode.addRow(new Object[]{
                    "No.Kunjungan",": "+response.path("noKunjungan").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "Tanggal Kunjungan",": "+response.path("tglKunjungan").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "Pemeriksaan Fisik Lain",": "+response.path("pemFisikLain").asText()
                });  
                tabMode.addRow(new Object[]{
                    "Poli Rujukan",""
                });
                tabMode.addRow(new Object[]{
                    "       Kode Poli",": "+response.path("poliRujukan").path("kdPoli").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "       Nama Poli",": "+response.path("poliRujukan").path("nmPoli").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "Diagnosa",":"
                });               
                tabMode.addRow(new Object[]{
                    "       Kode Diagnosa",": "+response.path("diagnosa").path("kdDiag").asText()
                });               
                tabMode.addRow(new Object[]{
                    "       Nama Diagnosa",": "+response.path("diagnosa").path("nmDiag").asText()
                });                  
                tabMode.addRow(new Object[]{
                    "Peserta",":"
                });  
                tabMode.addRow(new Object[]{
                    "       Nama",": "+response.path("peserta").path("nama").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "       NIK",": "+response.path("peserta").path("nik").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "       No.Kartu",": "+response.path("peserta").path("noKartu").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "       No.Rekam Medis",": "+response.path("peserta").path("noMr").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "       Pisa",": "+response.path("peserta").path("pisa").asText()
                }); 
                if(response.path("peserta").path("sex").asText().equals("L")){
                    tabMode.addRow(new Object[]{
                        "       Jenis Kelamin",": Laki-Laki"
                    });
                }else if(response.path("peserta").path("sex").asText().equals("P")){
                    tabMode.addRow(new Object[]{
                        "       Jenis Kelamin",": Perempuan"
                    });
                }   
                tabMode.addRow(new Object[]{
                    "       Tanggal Cetak Kartu",": "+response.path("peserta").path("tglCetakKartu").asText()
                });
                tabMode.addRow(new Object[]{
                    "       Tanggal Lahir",": "+response.path("peserta").path("tglLahir").asText()
                });
                tabMode.addRow(new Object[]{
                    "       Tanggal TAT",": "+response.path("peserta").path("tglTAT").asText()
                });
                tabMode.addRow(new Object[]{
                    "       Tanggal TMT",": "+response.path("peserta").path("tglTMT").asText()
                });
                tabMode.addRow(new Object[]{
                    "       Umur",": "+response.path("peserta").path("umur").asText()
                });
                tabMode.addRow(new Object[]{
                    "       Jenis Peserta",":"
                });                  
                tabMode.addRow(new Object[]{
                    "               Kode Jenis Peserta",": "+response.path("peserta").path("jenisPeserta").path("kdJenisPeserta").asText()
                });  
                tabMode.addRow(new Object[]{
                    "               Nama Jenis Peserta",": "+response.path("peserta").path("jenisPeserta").path("nmJenisPeserta").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "       Kelas Tanggungan",":"
                });  
                tabMode.addRow(new Object[]{
                    "               Kode Kelas",": "+response.path("peserta").path("kelasTanggungan").path("kdKelas").asText()
                });  
                tabMode.addRow(new Object[]{
                    "               Nama Kelas",": "+response.path("peserta").path("kelasTanggungan").path("nmKelas").asText()
                });                  
                tabMode.addRow(new Object[]{
                    "       Provider Umum",":"
                });  
                tabMode.addRow(new Object[]{
                    "               Kode Cabang",": "+response.path("peserta").path("provUmum").path("kdCabang").asText()
                });  
                tabMode.addRow(new Object[]{
                    "               Nama Cabang",": "+response.path("peserta").path("provUmum").path("nmCabang").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "               Kode Provider",": "+response.path("peserta").path("provUmum").path("kdProvider").asText()
                });  
                tabMode.addRow(new Object[]{
                    "               Nama Provider",": "+response.path("peserta").path("provUmum").path("nmProvider").asText()
                });                 
                tabMode.addRow(new Object[]{
                    "       Status Peserta",":"
                });  
                tabMode.addRow(new Object[]{
                    "               Keterangan",": "+response.path("peserta").path("statusPeserta").path("keterangan").asText()
                });  
                tabMode.addRow(new Object[]{
                    "               Kode",": "+response.path("peserta").path("statusPeserta").path("kode").asText()
                });   
                tabMode.addRow(new Object[]{
                    "       Informasi",":"
                });                 
                tabMode.addRow(new Object[]{
                    "               Dinsos",": "+response.path("peserta").path("informasi").path("dinsos").asText()
                });  
                tabMode.addRow(new Object[]{
                    "               Iuran",": "+response.path("peserta").path("informasi").path("iuran").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "               No.SKTM",": "+response.path("peserta").path("informasi").path("noSKTM").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "               Prolanis PRB",": "+response.path("peserta").path("informasi").path("prolanisPRB").asText()
                });                                 
                tabMode.addRow(new Object[]{
                    "Provider Kunjungan",""
                });
                tabMode.addRow(new Object[]{
                    "       Kode Cabang",": "+response.path("provKunjungan").path("kdCabang").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "       Nama Cabang",": "+response.path("provKunjungan").path("nmCabang").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "       Kode Provider",": "+response.path("provKunjungan").path("kdProvider").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "       Nama Provider",": "+response.path("provKunjungan").path("nmProvider").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "Provider Rujukan",""
                });
                tabMode.addRow(new Object[]{
                    "       Kode Cabang",": "+response.path("provRujukan").path("kdCabang").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "       Nama Cabang",": "+response.path("provRujukan").path("nmCabang").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "       Kode Provider",": "+response.path("provRujukan").path("kdProvider").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "       Nama Provider",": "+response.path("provRujukan").path("nmProvider").asText()
                });                 
                tabMode.addRow(new Object[]{
                    "Tingkat Pelayanan",""
                });
                tabMode.addRow(new Object[]{
                    "       Tingkat Pelayanan",": "+response.path("tktPelayanan").path("tktPelayanan").asText()
                }); 
                tabMode.addRow(new Object[]{
                    "       Nama Pelayanan",": "+response.path("tktPelayanan").path("nmPelayanan").asText()
                }); 
            }else {
                JOptionPane.showMessageDialog(null,nameNode.path("message").asText());                
            }   
        } catch (Exception ex) {
            System.out.println("Notifikasi Peserta : "+ex);
            if(ex.toString().contains("UnknownHostException")){
                JOptionPane.showMessageDialog(rootPane,"Koneksi ke server BPJS terputus...!");
            }
        }
    }    
 
    private void isForm(){
        if(ChkCari.isSelected()==true){
            panelCari.setVisible(true);
            PanelInput.setPreferredSize(new Dimension(WIDTH,internalFrame1.getHeight()-30));
        }else if(ChkCari.isSelected()==false){           
            panelCari.setVisible(false);      
            PanelInput.setPreferredSize(new Dimension(WIDTH,77));
        }
    }
}
